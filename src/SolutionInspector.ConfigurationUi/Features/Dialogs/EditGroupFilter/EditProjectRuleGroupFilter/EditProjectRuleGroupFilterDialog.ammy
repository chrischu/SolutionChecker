using SolutionInspector.ConfigurationUi.Features.Dialogs.EditGroupFilter.EditProjectRuleGroupFilter
using SolutionInspector.ConfigurationUi.Features.Dialogs.EditGroupFilter
using SolutionInspector.ConfigurationUi.Infrastructure.Behaviors
using SolutionInspector.ConfigurationUi.Features.Controls

UserControl "SolutionInspector.ConfigurationUi.Features.Dialogs.EditGroupFilter.EditProjectRuleGroupFilter.EditProjectRuleGroupFilterDialog" {
  "xmlns:bev": "clr-namespace:SolutionInspector.ConfigurationUi.Infrastructure.Behaviors"

  Width: bind ActualWidth from $ancestor<Window> convert (double x) => x * 0.75
  Height: bind ActualHeight from $ancestor<Window> convert (double x) => x * 0.75

  DockPanel  { 
    Margin: 18

    @StackPanelHorizontal() {
      DockPanel.Dock: Top
      Margin: "0 0 0 12"

      @Title(bind Title) {}
    }

    @StackPanelHorizontal() {
      DockPanel.Dock: Bottom
      HorizontalAlignment: Right
      Margin: "0 24 0 0"
      @FlatButton() {
        IsDefault: true
        Command: MaterialDesignThemes.Wpf.DialogHost.CloseDialogCommand
        CommandParameter: true
        Content: "SAVE"
      }
      @FlatButton() {
        IsCancel: true
        Command: MaterialDesignThemes.Wpf.DialogHost.CloseDialogCommand
        CommandParameter: false
        Content: "CANCEL"
      }
    }

    Grid "Root" { 
      DataContext: bind ProjectRuleGroupFilter

      #ThreeColumns("*", "auto", "*")

      DockPanel { 
        Grid.Row: 0

        Grid { 
          DockPanel.Dock: Bottom
          #FiveColumns("*", "6", "*", "6", "*")

          IsEnabled: bind IsInManualEditMode convert (bool b) => !b

          @MidButton() { Grid.Column: 0, Content: "Check All", Command: bind CheckAllCommand }
          @MidButton() { Grid.Column: 2, Content: "Uncheck All", Command: bind UncheckAllCommand }
          @MidButton() { Grid.Column: 4, Content: "Invert Selection", Command: bind InvertSelectionCommand }
        }

        TreeView {
          ItemsSource: bind Projects

          ItemContainerStyle: Style {
            BasedOn: resource "MaterialDesignTreeViewItem"
            TargetType: TreeViewItem

            #Setter("KeyboardNavigation.AcceptsReturn", true)
            #Setter("bev:VirtualToggleButton.IsVirtualToggleButton", true)
            #Setter("bev:VirtualToggleButton.IsChecked", bind IsChecked)
            #Setter("IsSelected", bind IsSelected set [ Mode: "TwoWay" ])
            #Setter("IsExpanded", bind IsExpanded set [ Mode: "TwoWay" ])
            #Setter("Padding", "0")
            #Setter("HorizontalContentAlignment", "Stretch")
          }

          ItemTemplate: DataTemplate {
            DataType: ProjectTreeViewModel

            CheckBox { 
              Focusable: false
              IsChecked: bind IsChecked
              IsEnabled: bind DataContext.IsInManualEditMode from "Root" convert (bool b) => !b
              VerticalAlignment: Center
              HorizontalAlignment: Stretch

              Content: @StackPanelHorizontal() {
                Margin: "0 3"

                @CrispImage(bind Extension set [ Converter: resource "FileExtensionToIconMonikerConverter", ConverterParameter: "Project" ]) {}

                ContentPresenter { Content: bind Name, Margin: "3 0" }
              }
            }
          }
        }
      }
    
      @DarkButton { 
        Height: "Auto"
        VerticalAlignment: Center

        Grid.Column: 1
        Content: TextBlock {
          TextAlignment: Center

          Run { Text: "Switch to" }
          LineBreak { }
          Run { Text:  bind IsInManualEditMode convert (bool b) => b ? "automatic" : "manual"}
          LineBreak { }
          Run { Text: "editing mode" }
        }
        
        Command: bind SwitchEditModeCommand
      }

      StackPanel { 
        Resources: [
          DataTemplate Key="Filter" {
            Border {
              Style: Style {
                TargetType: Border
                Setters: [
                  Setter { Property: "Background", Value: Transparent }
                ]

                Triggers: [
                  @Trigger_SetProperty("Border.IsMouseOver", true, "Background", "#E6E6E6") {}
                ]
              }

              @StackPanelHorizontal() {
                EditableTextBlock { 
                  Text: bind set [ Mode: OneWay ]
                  IsEditable: bind DataContext.IsInManualEditMode from "Root"
                  Command: bind DataContext.EditCommand from $ancestor<ItemsControl>
                  CommandParameter: bind "(ItemsControl.AlternationIndex)" from $template
                }

                @InlineToolButton("Remove", "Delete") {
                  Visibility: bind DataContext.IsInManualEditMode from "Root" convert (bool b) => b ? Visibility.Visible : Visibility.Hidden
                  Command: bind DataContext.RemoveCommand from $ancestor<ItemsControl>
                  CommandParameter: bind "(ItemsControl.AlternationIndex)" from $template
                }
              }
            }
          }
        ]

        Grid.Column: 2

        StackPanel { 
          @StackPanelHorizontal() {
            TextBlock { Text: "Includes", FontWeight: Bold, VerticalAlignment: Center }
            @InlineToolButton("Add include", "Plus", bind "AppliesTo.Includes.AddCommand") {
              Visibility: bind IsInManualEditMode convert (bool b) => b ? Visibility.Visible : Visibility.Hidden
            }
          }

          ItemsControl { 
            DataContext: bind AppliesTo.Includes
            ItemsSource: bind
            AlternationCount: bind Count
            ItemTemplate: resource "Filter" 
          }
        }

        StackPanel { 
          @StackPanelHorizontal() {
            TextBlock { Text: "Excludes", FontWeight: Bold, VerticalAlignment: Center }
            @InlineToolButton("Add exclude", "Plus", bind "AppliesTo.Excludes.AddCommand") {
              Visibility: bind IsInManualEditMode convert (bool b) => b ? Visibility.Visible : Visibility.Hidden
            }
          }

          ItemsControl { 
            DataContext: bind AppliesTo.Excludes
            ItemsSource: bind 
            AlternationCount: bind Count
            ItemTemplate: resource "Filter" 
          }
        }
      }
    }
  }
}