using SolutionInspector.ConfigurationUi.Infrastructure.ValidationRules
using SolutionInspector.ConfigurationUi.Infrastructure.Behaviors
using SolutionInspector.ConfigurationUi.Infrastructure
using System.Windows.Interactivity

UserControl "SolutionInspector.ConfigurationUi.Features.Dialogs.Input.InputDialog" {
  Grid { 
    #ThreeRows("auto","auto","auto")
    Margin: 16

    TextBlock { 
      Grid.Row: 0
      Text: bind Title
    }

    TextBox "ValueInput" { 
      Grid.Row: 1
      Text: Binding {
        Path: "Value"
        UpdateSourceTrigger: PropertyChanged
        ValidationRules: [
          CompoundValidationRule "CompoundValidationRule" {
            ValidatesOnTargetUpdated: true
          }
        ]
      }
      Interaction.Behaviors: [
        PutCursorAtEndTextBoxBehavior {
        }
      ]
    }
    BindingProxy { 
      Grid.Row: 0
      In: bind ValidationRules
      Out: bind ValidationRules from "CompoundValidationRule"
    }

    @StackPanelHorizontal() {
      Grid.Row: 2
      Margin: "0 24 0 0"
      Button "AcceptButton" { 
        Style: Style {
          TargetType: Button
          BasedOn: resource "MaterialDesignFlatButton"
          Triggers: [
            @DataTrigger_SetProperty(bind "(Validation.HasError)" from "ValueInput", true, "IsEnabled", false) {}
          ]
        }

        IsDefault: true
        Command: MaterialDesignThemes.Wpf.DialogHost.CloseDialogCommand
        CommandParameter: bind Value
        Content: bind AcceptButtonText
      }
      Button { 
        Style: resource "MaterialDesignFlatButton"
        IsCancel: true
        Command: MaterialDesignThemes.Wpf.DialogHost.CloseDialogCommand
        CommandParameter: null
        Content: bind CancelButtonText
      }
    }
  }
}