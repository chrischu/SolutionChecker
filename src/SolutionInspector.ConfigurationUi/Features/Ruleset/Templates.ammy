using SolutionInspector.ConfigurationUi.Features.Ruleset.ViewModels

alias RuleTypeExpander(header, addText, addCommand) {
  Expander {
    BorderBrush: Black
    IsExpanded: true
    BorderThickness: "0 0 0 1"
    Padding: 6
    Header: @StackPanelHorizontal() {
      Margin: 0
      @Headline($header) {}
      @FloatingMiniAccentButton($addText, "Plus", $addCommand) { Margin: "12 0 0 0" }
      @SearchBox(bind LocalFilter set [ UpdateSourceTrigger: "PropertyChanged" ], "Filter Rules") { Margin: "12 0 0 0" }
    }

    ItemsControl { 
      ItemsSource: bind RuleGroups
      AlternationCount: bind RuleGroups.Count
    }
  }
}

ResourceDictionary {
  DataTemplate {
    DataType: SolutionRulesViewModel

    @RuleTypeExpander("Solution Rules", "Add Rule", bind "RuleGroups[0].AddRuleCommand") "Expander" { #ColorSolution }

    Triggers: [
      @DataTrigger(bind RuleGroups.Count, 0) {
        #Setter("Padding", "0", "Expander")
      }

      @DataTrigger(bind IsExpanded from "Expander", false) {
        #Setter("Padding", "0", "Expander")
      }
    ]
  }

  DataTemplate {
    DataType: ProjectRulesViewModel
    
    @RuleTypeExpander("Project Rules", "Add Rule Group", bind AddRuleGroupCommand) "Expander" { #ColorProject }

    Triggers: [
      @DataTrigger(bind RuleGroups.Count, 0) {
        #Setter("Padding", "0", "Expander")
      }

      @DataTrigger(bind IsExpanded from "Expander", false) {
        #Setter("Padding", "0", "Expander")
      }
    ]
  }

  DataTemplate {
    DataType: ProjectItemRulesViewModel

    @RuleTypeExpander("Project Item Rules", "Add Rule Group", bind AddRuleGroupCommand) "Expander" { #ColorProjectItem }

    Triggers: [
      @DataTrigger(bind RuleGroups.Count, 0) {
        #Setter("Padding", "0", "Expander")
      }

      @DataTrigger(bind IsExpanded from "Expander", false) {
        #Setter("Padding", "0", "Expander")
      }
    ]
  }

  DataTemplate {
    DataType: SolutionRuleGroupViewModel

    ItemsControl { 
      ItemsSource: bind Rules
      AlternationCount: bind Rules.Count
    }
  }

  DataTemplate Key="BulletItemTemplate" { 
    BulletDecorator { 
      Width: "Auto"
      Bullet: Ellipse { Fill: bind Foreground from "TextBlock", Width: 4, Height: 4 }
      Margin: "6 0"

      TextBlock "TextBlock" { Margin: "3 0", Text: bind }
    }
  }

  DataTemplate {
    DataType: ProjectRuleGroupViewModel

    Border { 
      BorderThickness: 1
      BorderBrush: Black
      #Lighten

      Expander "Expander" { 
        Background: Transparent
        BorderBrush: Black
        IsExpanded: true
        Padding: 6
        Header: @StackPanelHorizontal() {
          @Title() { 
            Text: bind Name convert (string name) =>  name == null || name == "" ? "<unnamed>" : name 

            ToolTip: StackPanel "ToolTip" {
              StackPanel "ToolTip_Includes" { 
                TextBlock { Text: "Includes projects named like: " }
                ItemsControl { ItemsSource: bind AppliesTo.Includes, ItemTemplate: resource "BulletItemTemplate" }
              }
              TextBlock "ToolTip_IncludesAll" { 
                Visibility: Collapsed
                Text: "Includes all projects" 
              }
              StackPanel "ToolTip_Excludes" { 
                TextBlock { Text: "excluding projects named like: " }
                ItemsControl { ItemsSource: bind AppliesTo.Excludes, ItemTemplate: resource "BulletItemTemplate" }
              }
            }
          }

          @FloatingMiniAccentButton("Edit Rule Group", "Pencil", bind EditCommand, bind "DataContext.Ruleset.Solution" from $ancestor<UserControl>) { Margin: "12 0 0 0" }
          @FloatingMiniAccentButton("Add Rule", "Plus", bind AddRuleCommand) { Margin: "12 0 0 0" }
          @SearchBox(bind LocalFilter set [ UpdateSourceTrigger: "PropertyChanged" ], "Filter Rules") { Margin: "12 0 0 0" }
        }

        ItemsControl { 
          ItemsSource: bind Rules
          AlternationCount: bind Rules.Count
        }
      }
    }

    Triggers: [
      @DataTrigger(bind Rules.Count, 0) {
        #Setter("Padding", "0", "Expander")
      }

      @DataTrigger(bind IsExpanded from "Expander", false) {
        #Setter("Padding", "0", "Expander")
      }

      @DataTrigger (bind "AppliesTo.Excludes.Count", 0) {
        #Setter("Visibility", "Collapsed", "ToolTip_Excludes")
      }

      @DataTrigger (bind "AppliesTo.IncludesAll", true) {
        #Setter("Visibility", "Collapsed", "ToolTip_Includes")
        #Setter("Visibility", "Visible", "ToolTip_IncludesAll")
      }
    ]
  }

  DataTemplate {
    DataType: ProjectItemRuleGroupViewModel

    Border { 
      BorderThickness: 1
      BorderBrush: Black
      #Lighten

      Expander "Expander" { 
        Background: Transparent
        BorderBrush: Black
        IsExpanded: true
        Padding: 6
        Header: @StackPanelHorizontal() {
          @Title() { 
            Text: bind Name convert (string name) =>  name == null || name == "" ? "<unnamed>" : name 

            ToolTip: StackPanel "ToolTip" {
              StackPanel "ToolTip_AppliesToIncludes" { 
                TextBlock { Text: "Includes project items named like: " }
                ItemsControl { ItemsSource: bind AppliesTo.Includes, ItemTemplate: resource "BulletItemTemplate" }
              }
              TextBlock "ToolTip_AppliesToIncludesAll" { 
                Visibility: Collapsed
                Text: "Includes all project items," 
              }
              StackPanel "ToolTip_AppliesToExcludes" { 
                TextBlock { Text: "excluding project items named like: " }
                ItemsControl { ItemsSource: bind AppliesTo.Excludes, ItemTemplate: resource "BulletItemTemplate" }
              }
              StackPanel "ToolTip_ProjectIncludes" { 
                TextBlock { Text: "in projects named like: " }
                ItemsControl { ItemsSource: bind InProject.Includes, ItemTemplate: resource "BulletItemTemplate" }
              }
              TextBlock "ToolTip_ProjectIncludesAll" { 
                Visibility: Collapsed
                Text: "in all projects" 
              }
              StackPanel "ToolTip_ProjectExcludes" { 
                TextBlock { Text: "excluding projects named like: " }
                ItemsControl { ItemsSource: bind InProject.Excludes, ItemTemplate: resource "BulletItemTemplate" }
              }
            }
          }

          @FloatingMiniAccentButton("Edit Rule Group", "Pencil", bind EditCommand) { Margin: "12 0 0 0" }
          @FloatingMiniAccentButton("Add Rule", "Plus", bind AddRuleCommand) { Margin: "12 0 0 0" }
          @SearchBox(bind LocalFilter set [ UpdateSourceTrigger: "PropertyChanged" ], "Filter Rules") { Margin: "12 0 0 0" }
        }

        ItemsControl { 
          ItemsSource: bind Rules
          AlternationCount: bind Rules.Count
        }
      }
    }

    DataTemplate.Triggers: [
      @DataTrigger(bind Rules.Count, 0) {
        #Setter("Padding", "0", "Expander")
      }

      @DataTrigger(bind IsExpanded from "Expander", false) {
        #Setter("Padding", "0", "Expander")
      }

      @DataTrigger (bind "AppliesTo.Excludes.Count", 0) {
        #Setter("Visibility", "Collapsed", "ToolTip_AppliesToExcludes")
      }

      @DataTrigger (bind "AppliesTo.IncludesAll", true) {
        #Setter("Visibility", "Collapsed", "ToolTip_AppliesToIncludes")
        #Setter("Visibility", "Visible", "ToolTip_AppliesToIncludesAll")
      }

      @DataTrigger (bind "InProject.Excludes.Count", 0) {
        #Setter("Visibility", "Collapsed", "ToolTip_ProjectExcludes")
      }

      @DataTrigger (bind "InProject.IncludesAll", true) {
        #Setter("Visibility", "Collapsed", "ToolTip_ProjectIncludes")
        #Setter("Visibility", "Visible", "ToolTip_ProjectIncludesAll")
      }
    ]
  }

  DataTemplate { 
    DataType: RuleGroupViewModel

    Expander "Expander" {
      BorderBrush: Black
      IsExpanded: true
      BorderThickness: "0 0 0 1"
      Padding: 6
      #Lighten
      Header: @StackPanelHorizontal() {
        @Title(bind Title) {}
        @FloatingMiniAccentButton("Add Rule", "Plus", bind AddRuleCommand) { Margin: "12 0 0 0" }
        @SearchBox(bind LocalFilter set [ UpdateSourceTrigger: "PropertyChanged" ], "Filter Rules") { Margin: "12 0 0 0" }
      }

      ItemsControl { 
        ItemsSource: bind Rules
        AlternationCount: bind Rules.Count
        ItemTemplate: resource "RuleViewModel"
      }
    }

    Triggers: [
      @DataTrigger(bind Title, "Solution Rules") {
        #Setter("Background", "Transparent", "Expander")
      }

      @DataTrigger(bind Rules.Count, 0) {
        #Setter("Padding", "0", "Expander")
      }

      @DataTrigger(bind IsExpanded from "Expander", false) {
        #Setter("Padding", "0", "Expander")
      }
    ]
  }

  DataTemplate { 
    DataType: RuleViewModel

    Border { 
      BorderThickness: 1
      BorderBrush: Black
      #Lighten
      Grid {
        Background: Transparent

        @StackPanelHorizontal() {
          ToolTip: "Filtered"
          Visibility: bind IsFiltered convert (bool isFiltered) => isFiltered ? Visibility.Visible : Visibility.Collapsed
          Background: LightGray

          @PackIcon("EyeOff") { Margin: "6 0", VerticalAlignment: Center }
          @Subheading(bind Name) { FontWeight: Bold }
        }

        Expander "Expander" {
          Visibility: bind IsFiltered convert (bool isFiltered) => isFiltered ? Visibility.Collapsed : Visibility.Visible
          IsExpanded: true
          Background: Transparent
          Padding: 6

          Header: @StackPanelHorizontal() {
            @Subheading(bind Name) { FontWeight: Bold }
            @FloatingMiniAccentButton("Remove Rule", "Delete", bind DataContext.RemoveRuleCommand from $ancestor<ItemsControl>, bind "(ItemsControl.AlternationIndex)" from $template) { Margin: "12 0 0 0" }
          }

          StackPanel {
            Margin: "6 0 6 6"
            @Body1Text(bind Documentation) { }
            ItemsControl { 
              Margin: "0 12 0 0"
              ItemsSource: bind Configuration.Properties
              Visibility: bind Configuration convert (object configuration) => configuration != null ? Visibility.Visible : Visibility.Collapsed

              Grid.IsSharedSizeScope: true
              BorderThickness: "0 1 0 0"
              BorderBrush: Black

              ItemTemplate: DataTemplate { 
                DataType: RuleConfigurationPropertyViewModel

                Grid {
                  ColumnDefinitions: [
                    ColumnDefinition { Width: Auto, SharedSizeGroup: "A" }
                    ColumnDefinition { Width: "*" }
                  ]

                  Border { 
                    Grid.Column: 0
                    BorderThickness: "1 0 1 1"
                    BorderBrush: Black
                    Background: LightGray

                    StackPanel {
                      Margin: "2 0"

                      @CaptionText(bind Name) "PropertyTitle" { FontWeight: Bold }
                      @CaptionText(bind Documentation) { MaxWidth: bind ActualWidth from "PropertyTitle" }
                    }
                  }

                  Border {
                    Grid.Column: 1
                    BorderThickness: "0 0 1 1"
                    BorderBrush: Black
                    #Paper

                    ContentPresenter {
                      Content: bind Value
                      // Set Font properties to CaptionText values
                      TextBlock.FontSize: 12
                      TextBlock.FontWeight: Regular
                    }
                  }
                }
              }
            } 
          }
        }
      }
    }

    Triggers: [
      @DataTrigger(bind IsExpanded from "Expander", false) {
        #Setter("Padding", "0", "Expander")
      }
    ]
  }
}